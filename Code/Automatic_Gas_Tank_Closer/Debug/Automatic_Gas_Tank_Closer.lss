
Automatic_Gas_Tank_Closer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffa  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dd  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000653  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fa  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000337e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 13 01 	call	0x226	; 0x226 <main>
  88:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitServo>:

unsigned char receiveUSART(void)
{
	while(! (UCSR0A & (1<<RXC0))) ;			// wait till data received
	return UDR0;							// Receive data
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
  96:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  9a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  9e:	83 ec       	ldi	r24, 0xC3	; 195
  a0:	99 e0       	ldi	r25, 0x09	; 9
  a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  aa:	82 e8       	ldi	r24, 0x82	; 130
  ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  b0:	8b e1       	ldi	r24, 0x1B	; 27
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b6:	08 95       	ret

000000b8 <RotateServo>:
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	3d e3       	ldi	r19, 0x3D	; 61
  bc:	49 e4       	ldi	r20, 0x49	; 73
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	40 40       	sbci	r20, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <RotateServo+0x6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <RotateServo+0x10>
  c8:	00 00       	nop
  ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	9d e3       	ldi	r25, 0x3D	; 61
  d6:	29 e4       	ldi	r18, 0x49	; 73
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <RotateServo+0x20>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <RotateServo+0x2a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <initUSART>:
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ea:	87 e6       	ldi	r24, 0x67	; 103
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f0:	88 e9       	ldi	r24, 0x98	; 152
  f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <transmitUSART>:
 100:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 104:	95 ff       	sbrs	r25, 5
 106:	fc cf       	rjmp	.-8      	; 0x100 <transmitUSART>
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10c:	08 95       	ret

0000010e <initADC>:

/*--------ADC conversion part of the gas sensor readings -----------*/

void initADC(void){
	ADCSRA |= (1<<ADEN);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
	ADCSRA |= 0B00000111;
 118:	80 81       	ld	r24, Z
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <readGasLevel>:
}

int readGasLevel()
{
	ADMUX = (ADMUX & 0xF0) | 0;				// Set input channel to 0
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	80 83       	st	Z, r24
	ADMUX &= 0B00111111;					// Turn off the internal reference voltage
 130:	80 81       	ld	r24, Z
 132:	8f 73       	andi	r24, 0x3F	; 63
 134:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);					// Start the conversion
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));				// Wait till conversion completes
 140:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 144:	86 fd       	sbrc	r24, 6
 146:	fc cf       	rjmp	.-8      	; 0x140 <readGasLevel+0x1a>
	return ADC;								// Returning the ADC value
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 14c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 150:	08 95       	ret

00000152 <printGasLevel>:

/*-------- Printing the gas level -----------*/

void printGasLevel(int ADC_value)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	9c 01       	movw	r18, r24
	A0 = ADC_value%10;
 158:	ea e0       	ldi	r30, 0x0A	; 10
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	bf 01       	movw	r22, r30
 15e:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 162:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <A0+0x1>
 166:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <A0>
	A1 = (ADC_value%100)/10;
 16a:	c4 e6       	ldi	r28, 0x64	; 100
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	c9 01       	movw	r24, r18
 170:	be 01       	movw	r22, r28
 172:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 176:	bf 01       	movw	r22, r30
 178:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 17c:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <A1+0x1>
 180:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <A1>
	A2 = (ADC_value%1000)/100;
 184:	e8 ee       	ldi	r30, 0xE8	; 232
 186:	f3 e0       	ldi	r31, 0x03	; 3
 188:	c9 01       	movw	r24, r18
 18a:	bf 01       	movw	r22, r30
 18c:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 190:	be 01       	movw	r22, r28
 192:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 196:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <A2+0x1>
 19a:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <A2>
	A3 = (ADC_value%10000)/1000;
 19e:	c9 01       	movw	r24, r18
 1a0:	60 e1       	ldi	r22, 0x10	; 16
 1a2:	77 e2       	ldi	r23, 0x27	; 39
 1a4:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 1a8:	bf 01       	movw	r22, r30
 1aa:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 1ae:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <A3>
 1b2:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <A3+0x1>

	rxFlag=0;
 1b6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rxFlag+0x1>
 1ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rxFlag>
	rxData =0x30+A3;
 1be:	60 5d       	subi	r22, 0xD0	; 208
 1c0:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <rxData>
	transmitUSART(rxData);
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 1c8:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	
	rxData =0x30+A2;
 1cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <A2>
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxData>
	transmitUSART(rxData);
 1d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 1da:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	
	rxData =0x30+A1;
 1de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <A1>
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxData>
	transmitUSART(rxData);
 1e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 1ec:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	
	rxData =0x30+A0;
 1f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <A0>
 1f4:	80 5d       	subi	r24, 0xD0	; 208
 1f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxData>
	transmitUSART(rxData);
 1fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 1fe:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	
	transmitUSART(0x0A); //Line feed
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	transmitUSART (0x0D);
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	0e 94 80 00 	call	0x100	; 0x100 <transmitUSART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	89 e6       	ldi	r24, 0x69	; 105
 212:	98 e1       	ldi	r25, 0x18	; 24
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <printGasLevel+0xc2>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <printGasLevel+0xcc>
 21e:	00 00       	nop
	
	_delay_ms(500);
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <main>:
	// pos = 600 (0 degree)
	// pos = 360 (90 degree)
	
	int mute = 0 ;
	
	InitServo();			// Initialize the servo motor
 226:	0e 94 48 00 	call	0x90	; 0x90 <InitServo>
	DDRD &= 0B10110011;
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	83 7b       	andi	r24, 0xB3	; 179
 22e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 0B10110000;
 230:	8a b1       	in	r24, 0x0a	; 10
 232:	80 6b       	ori	r24, 0xB0	; 176
 234:	8a b9       	out	0x0a, r24	; 10
	initUSART () ;			// Initialize the USART
 236:	0e 94 73 00 	call	0xe6	; 0xe6 <initUSART>
	initADC();				// Initialize the ADC
 23a:	0e 94 87 00 	call	0x10e	; 0x10e <initADC>
	
	unsigned char rxByte;

	DDRB |= 0B00000100;
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	84 60       	ori	r24, 0x04	; 4
 242:	84 b9       	out	0x04, r24	; 4
	
	PORTD|= 0B00100000;		// Notifying the user the device is on using turn on led (Green LED)
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	80 62       	ori	r24, 0x20	; 32
 248:	8b b9       	out	0x0b, r24	; 11
	
	PORTD|= 0B10000000;		// Notifying the user the device is on using buzzer
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8b b9       	out	0x0b, r24	; 11
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	81 ee       	ldi	r24, 0xE1	; 225
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x30>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x3a>
 260:	00 00       	nop
	_delay_ms(100);
	PORTD &= 0B01111111;
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 77       	andi	r24, 0x7F	; 127
 266:	8b b9       	out	0x0b, r24	; 11
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	81 ee       	ldi	r24, 0xE1	; 225
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x48>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x52>
 278:	00 00       	nop
	_delay_ms(100);
	PORTD|= 0B10000000;
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x60>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x6a>
 290:	00 00       	nop
	_delay_ms(100);
	PORTD &= 0B01111111;
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8f 77       	andi	r24, 0x7F	; 127
 296:	8b b9       	out	0x0b, r24	; 11
	
	
	while (1)
	{
		ADC_value = readGasLevel(); // Read the gas level and save in a variable
 298:	0e 94 93 00 	call	0x126	; 0x126 <readGasLevel>
 29c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		printGasLevel(ADC_value);	// Print the gas level on a serial monitor (For debugging purposes)
 2a4:	0e 94 a9 00 	call	0x152	; 0x152 <printGasLevel>
		
		
		if (ADC_value>400)			// Checking gas level is greater than 400
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b0:	81 39       	cpi	r24, 0x91	; 145
 2b2:	91 40       	sbci	r25, 0x01	; 1
 2b4:	c4 f0       	brlt	.+48     	; 0x2e6 <main+0xc0>
		{
			PORTB |= 0B00000100;	// Turn on gas leak indicator light
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	85 b9       	out	0x05, r24	; 5
			PORTD|= 0B10000000;		// Turn on the buzzer
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8b b9       	out	0x0b, r24	; 11
			RotateServo(360);		// Turn off the gas regulator
 2c2:	88 e6       	ldi	r24, 0x68	; 104
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <RotateServo>
			knob = 0;
 2ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <knob+0x1>
 2ce:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <knob>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	91 ee       	ldi	r25, 0xE1	; 225
 2d6:	24 e0       	ldi	r18, 0x04	; 4
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	20 40       	sbci	r18, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xb2>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xbc>
 2e2:	00 00       	nop
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <main+0xc6>
			_delay_ms(100);
			
		}
		else
		{
			PORTB &= 0B11111011;	// Turn off gas leak indicator light
 2e6:	85 b1       	in	r24, 0x05	; 5
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	85 b9       	out	0x05, r24	; 5
		}
		
		/*----- close button--------*/
		
		if ((PIND & 0B00000100)== 0) // Checking the closed button is pressed or not
 2ec:	4a 9b       	sbis	0x09, 2	; 9
 2ee:	7c c0       	rjmp	.+248    	; 0x3e8 <main+0x1c2>
		{
			
		}
		else
		{
			if (knob==1)
 2f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <knob>
 2f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <knob+0x1>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <main+0xd8>
 2fc:	45 c0       	rjmp	.+138    	; 0x388 <main+0x162>
			{
				PORTD |= 0B00010000; // Turn on RED led (alert bulb) to notify closing operation is started
 2fe:	8b b1       	in	r24, 0x0b	; 11
 300:	80 61       	ori	r24, 0x10	; 16
 302:	8b b9       	out	0x0b, r24	; 11
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	90 e7       	ldi	r25, 0x70	; 112
 308:	22 e0       	ldi	r18, 0x02	; 2
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	20 40       	sbci	r18, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0xe4>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0xee>
 314:	00 00       	nop
				_delay_ms(50);
				
				RotateServo(360);	 // Turn off the gas regulator
 316:	88 e6       	ldi	r24, 0x68	; 104
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 5c 00 	call	0xb8	; 0xb8 <RotateServo>
				knob = 0;
 31e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <knob+0x1>
 322:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <knob>
				
				PORTD |= 0B00010000; // Blinking RED led (alert bulb) to notify closing operation is successfully completed
 326:	8b b1       	in	r24, 0x0b	; 11
 328:	80 61       	ori	r24, 0x10	; 16
 32a:	8b b9       	out	0x0b, r24	; 11
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	91 ee       	ldi	r25, 0xE1	; 225
 330:	24 e0       	ldi	r18, 0x04	; 4
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x10c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x116>
 33c:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	8f 7e       	andi	r24, 0xEF	; 239
 342:	8b b9       	out	0x0b, r24	; 11
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	91 ee       	ldi	r25, 0xE1	; 225
 348:	24 e0       	ldi	r18, 0x04	; 4
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x124>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x12e>
 354:	00 00       	nop
				_delay_ms(100);
				PORTD |= 0B00010000;
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	80 61       	ori	r24, 0x10	; 16
 35a:	8b b9       	out	0x0b, r24	; 11
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	91 ee       	ldi	r25, 0xE1	; 225
 360:	24 e0       	ldi	r18, 0x04	; 4
 362:	81 50       	subi	r24, 0x01	; 1
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	20 40       	sbci	r18, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x13c>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x146>
 36c:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	8b b9       	out	0x0b, r24	; 11
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	91 ee       	ldi	r25, 0xE1	; 225
 378:	24 e0       	ldi	r18, 0x04	; 4
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	20 40       	sbci	r18, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x154>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x15e>
 384:	00 00       	nop
 386:	30 c0       	rjmp	.+96     	; 0x3e8 <main+0x1c2>
				_delay_ms(100);
			}
			else
			{
				PORTD |= 0B00010000; // Blinking RED led (alert bulb) to notify already closed
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	8b b9       	out	0x0b, r24	; 11
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	91 ee       	ldi	r25, 0xE1	; 225
 392:	24 e0       	ldi	r18, 0x04	; 4
 394:	81 50       	subi	r24, 0x01	; 1
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x16e>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x178>
 39e:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	8f 7e       	andi	r24, 0xEF	; 239
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	91 ee       	ldi	r25, 0xE1	; 225
 3aa:	24 e0       	ldi	r18, 0x04	; 4
 3ac:	81 50       	subi	r24, 0x01	; 1
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	20 40       	sbci	r18, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x186>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x190>
 3b6:	00 00       	nop
				_delay_ms(100);
				PORTD |= 0B00010000;
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	80 61       	ori	r24, 0x10	; 16
 3bc:	8b b9       	out	0x0b, r24	; 11
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	91 ee       	ldi	r25, 0xE1	; 225
 3c2:	24 e0       	ldi	r18, 0x04	; 4
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x19e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x1a8>
 3ce:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 3d0:	8b b1       	in	r24, 0x0b	; 11
 3d2:	8f 7e       	andi	r24, 0xEF	; 239
 3d4:	8b b9       	out	0x0b, r24	; 11
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	91 ee       	ldi	r25, 0xE1	; 225
 3da:	24 e0       	ldi	r18, 0x04	; 4
 3dc:	81 50       	subi	r24, 0x01	; 1
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	20 40       	sbci	r18, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x1b6>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x1c0>
 3e6:	00 00       	nop
			
		}
		
		/*------Mute Button---------*/
		
		if ((PIND & 0B01000000)== 0) // Checking the mute button is pressed or not
 3e8:	4e 9b       	sbis	0x09, 6	; 9
 3ea:	3f c0       	rjmp	.+126    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			
		}
		else
		{
			
			PORTD |= 0B00010000;	// Turn on RED led (alert bulb) to notify mute operation is started
 3ec:	8b b1       	in	r24, 0x0b	; 11
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	8b b9       	out	0x0b, r24	; 11
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	90 e7       	ldi	r25, 0x70	; 112
 3f6:	22 e0       	ldi	r18, 0x02	; 2
 3f8:	81 50       	subi	r24, 0x01	; 1
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	20 40       	sbci	r18, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x1d2>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
			_delay_ms(50);
			
			PORTD&= 0B01111111;		// Turn off the buzzer
 404:	8b b1       	in	r24, 0x0b	; 11
 406:	8f 77       	andi	r24, 0x7F	; 127
 408:	8b b9       	out	0x0b, r24	; 11
			
			PORTD |= 0B00010000;	// Blinking RED led (alert bulb) to notify mute operation is successfully completed
 40a:	8b b1       	in	r24, 0x0b	; 11
 40c:	80 61       	ori	r24, 0x10	; 16
 40e:	8b b9       	out	0x0b, r24	; 11
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	91 ee       	ldi	r25, 0xE1	; 225
 414:	24 e0       	ldi	r18, 0x04	; 4
 416:	81 50       	subi	r24, 0x01	; 1
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	20 40       	sbci	r18, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
			_delay_ms(100);
			PORTD &= 0B11101111;
 422:	8b b1       	in	r24, 0x0b	; 11
 424:	8f 7e       	andi	r24, 0xEF	; 239
 426:	8b b9       	out	0x0b, r24	; 11
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	91 ee       	ldi	r25, 0xE1	; 225
 42c:	24 e0       	ldi	r18, 0x04	; 4
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	20 40       	sbci	r18, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			_delay_ms(100);
			PORTD |= 0B00010000;
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	80 61       	ori	r24, 0x10	; 16
 43e:	8b b9       	out	0x0b, r24	; 11
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	91 ee       	ldi	r25, 0xE1	; 225
 444:	24 e0       	ldi	r18, 0x04	; 4
 446:	81 50       	subi	r24, 0x01	; 1
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	20 40       	sbci	r18, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
			_delay_ms(100);
			PORTD &= 0B11101111;
 452:	8b b1       	in	r24, 0x0b	; 11
 454:	8f 7e       	andi	r24, 0xEF	; 239
 456:	8b b9       	out	0x0b, r24	; 11
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	91 ee       	ldi	r25, 0xE1	; 225
 45c:	24 e0       	ldi	r18, 0x04	; 4
 45e:	81 50       	subi	r24, 0x01	; 1
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	20 40       	sbci	r18, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
			
		}
		
		/*--------Open  button---------*/
		
		if ((PIND & 0B00001000)== 0) // Checking the closed button is pressed or not
 46a:	4b 9b       	sbis	0x09, 3	; 9
 46c:	15 cf       	rjmp	.-470    	; 0x298 <main+0x72>
		{
			
		}
		else
		{
			if (knob==0)
 46e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <knob>
 472:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <knob+0x1>
 476:	89 2b       	or	r24, r25
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	47 c0       	rjmp	.+142    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			{
				PORTD |= 0B00010000;	// Turn on RED led (alert bulb) to notify opening operation is started
 47c:	8b b1       	in	r24, 0x0b	; 11
 47e:	80 61       	ori	r24, 0x10	; 16
 480:	8b b9       	out	0x0b, r24	; 11
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	90 e7       	ldi	r25, 0x70	; 112
 486:	22 e0       	ldi	r18, 0x02	; 2
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	20 40       	sbci	r18, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
				_delay_ms(50);
				
				RotateServo(120);		// Turn of the gas regulator
 494:	88 e7       	ldi	r24, 0x78	; 120
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 5c 00 	call	0xb8	; 0xb8 <RotateServo>
				knob = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <knob+0x1>
 4a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <knob>
				
				PORTD |= 0B00010000;	// Blinking RED led (alert bulb) to notify opening operation is successfully completed
 4a8:	8b b1       	in	r24, 0x0b	; 11
 4aa:	80 61       	ori	r24, 0x10	; 16
 4ac:	8b b9       	out	0x0b, r24	; 11
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	91 ee       	ldi	r25, 0xE1	; 225
 4b2:	24 e0       	ldi	r18, 0x04	; 4
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 4c0:	8b b1       	in	r24, 0x0b	; 11
 4c2:	8f 7e       	andi	r24, 0xEF	; 239
 4c4:	8b b9       	out	0x0b, r24	; 11
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	91 ee       	ldi	r25, 0xE1	; 225
 4ca:	24 e0       	ldi	r18, 0x04	; 4
 4cc:	81 50       	subi	r24, 0x01	; 1
 4ce:	90 40       	sbci	r25, 0x00	; 0
 4d0:	20 40       	sbci	r18, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
				_delay_ms(100);
				PORTD |= 0B00010000;
 4d8:	8b b1       	in	r24, 0x0b	; 11
 4da:	80 61       	ori	r24, 0x10	; 16
 4dc:	8b b9       	out	0x0b, r24	; 11
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	91 ee       	ldi	r25, 0xE1	; 225
 4e2:	24 e0       	ldi	r18, 0x04	; 4
 4e4:	81 50       	subi	r24, 0x01	; 1
 4e6:	90 40       	sbci	r25, 0x00	; 0
 4e8:	20 40       	sbci	r18, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 4f0:	8b b1       	in	r24, 0x0b	; 11
 4f2:	8f 7e       	andi	r24, 0xEF	; 239
 4f4:	8b b9       	out	0x0b, r24	; 11
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	91 ee       	ldi	r25, 0xE1	; 225
 4fa:	24 e0       	ldi	r18, 0x04	; 4
 4fc:	81 50       	subi	r24, 0x01	; 1
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 506:	00 00       	nop
 508:	c7 ce       	rjmp	.-626    	; 0x298 <main+0x72>
				_delay_ms(100);
			}
			else
			{
				PORTD |= 0B00010000;	// Blinking RED led (alert bulb) to notify already opened
 50a:	8b b1       	in	r24, 0x0b	; 11
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	8b b9       	out	0x0b, r24	; 11
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	91 ee       	ldi	r25, 0xE1	; 225
 514:	24 e0       	ldi	r18, 0x04	; 4
 516:	81 50       	subi	r24, 0x01	; 1
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	20 40       	sbci	r18, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 520:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 522:	8b b1       	in	r24, 0x0b	; 11
 524:	8f 7e       	andi	r24, 0xEF	; 239
 526:	8b b9       	out	0x0b, r24	; 11
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	91 ee       	ldi	r25, 0xE1	; 225
 52c:	24 e0       	ldi	r18, 0x04	; 4
 52e:	81 50       	subi	r24, 0x01	; 1
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	20 40       	sbci	r18, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 538:	00 00       	nop
				_delay_ms(100);
				PORTD |= 0B00010000;
 53a:	8b b1       	in	r24, 0x0b	; 11
 53c:	80 61       	ori	r24, 0x10	; 16
 53e:	8b b9       	out	0x0b, r24	; 11
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	91 ee       	ldi	r25, 0xE1	; 225
 544:	24 e0       	ldi	r18, 0x04	; 4
 546:	81 50       	subi	r24, 0x01	; 1
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 550:	00 00       	nop
				_delay_ms(100);
				PORTD &= 0B11101111;
 552:	8b b1       	in	r24, 0x0b	; 11
 554:	8f 7e       	andi	r24, 0xEF	; 239
 556:	8b b9       	out	0x0b, r24	; 11
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	91 ee       	ldi	r25, 0xE1	; 225
 55c:	24 e0       	ldi	r18, 0x04	; 4
 55e:	81 50       	subi	r24, 0x01	; 1
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	20 40       	sbci	r18, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 566:	00 c0       	rjmp	.+0      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 568:	00 00       	nop
 56a:	96 ce       	rjmp	.-724    	; 0x298 <main+0x72>

0000056c <__divmodhi4>:
 56c:	97 fb       	bst	r25, 7
 56e:	07 2e       	mov	r0, r23
 570:	16 f4       	brtc	.+4      	; 0x576 <__divmodhi4+0xa>
 572:	00 94       	com	r0
 574:	07 d0       	rcall	.+14     	; 0x584 <__divmodhi4_neg1>
 576:	77 fd       	sbrc	r23, 7
 578:	09 d0       	rcall	.+18     	; 0x58c <__divmodhi4_neg2>
 57a:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodhi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	05 d0       	rcall	.+10     	; 0x58c <__divmodhi4_neg2>
 582:	3e f4       	brtc	.+14     	; 0x592 <__divmodhi4_exit>

00000584 <__divmodhi4_neg1>:
 584:	90 95       	com	r25
 586:	81 95       	neg	r24
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__divmodhi4_neg2>:
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255

00000592 <__divmodhi4_exit>:
 592:	08 95       	ret

00000594 <__udivmodhi4>:
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	51 e1       	ldi	r21, 0x11	; 17
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__udivmodhi4_ep>

0000059c <__udivmodhi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	a6 17       	cp	r26, r22
 5a2:	b7 07       	cpc	r27, r23
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__udivmodhi4_ep>
 5a6:	a6 1b       	sub	r26, r22
 5a8:	b7 0b       	sbc	r27, r23

000005aa <__udivmodhi4_ep>:
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	5a 95       	dec	r21
 5b0:	a9 f7       	brne	.-22     	; 0x59c <__udivmodhi4_loop>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	bc 01       	movw	r22, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
